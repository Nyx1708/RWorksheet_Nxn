age <- c(34, 28, 22, 36, 27, 18, 52, 39, 42, 29, 35, 31, 27, 22, 37, 34, 19, 20, 57, 49, 50, 37, 46, 25, 17, 37, 42, 53, 41, 51, 35, 24, 33, 41)
length(age)
reciprocal_age <- 1 / age
reciprocal_age
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::tinytex_root()
tinytex::tinytex_root()
tinytex::tinytex_root()
tinytex::tinytex_root()
# Install TinyTeX if you haven't already
install.packages('tinytex')
tinytex::install_tinytex()
# Install necessary LaTeX packages
tinytex::tlmgr_install(c("graphicx", "amsmath", "amssymb", "geometry",
"booktabs", "caption", "float", "xcolor",
"biblatex", "knitr", "setspace"))
# Part 4c: Name rows, columns, and dimensions
dimnames(array_data) <- list(letters[1:2], LETTERS[1:4], c("1st-Dimensional Array", "2nd-Dimensional Array", "3rd-Dimensional Array"))
---
title: "RWorkshee_Sobusa#3a.rmd"
## Part 1b: Odd numbered letters
odd_letters <- LETTERS[seq(1, 26, 2)]
print(odd_letters)
# 1. Using Vectors
## Part 1a: First 11 letters from LETTERS vector
first_11_letters <- LETTERS[1:11]
print(first_11_letters)
## Part 1b: Odd numbered letters
odd_letters <- LETTERS[seq(1, 26, 2)]
print(odd_letters)
## Part 1c: Vowels from LETTERS
vowels <- LETTERS[c(1, 5, 9, 15, 21)]
print(vowels)
## Part 1d: Last 5 lowercase letters from letters vector
last_5_letters <- letters[22:26]
print(last_5_letters)
## Part 1e: Letters between 15 and 24 in lowercase
subset_letters <- letters[15:24]
print(subset_letters)
# 2. Working with Temperature Data
## Part 2a: Character vector for cities
city <- c("Tuguegarao City", "Manila", "Iloilo City", "Tacloban", "Samal Island", "Davao City")
print(city)
## Part 2b: Temperature vector
temp <- c(42, 39, 34, 34, 30, 27)
print(temp)
## Part 2c: Creating a data frame
temp_data <- data.frame(City = city, Temperature = temp)
print(temp_data)
## Part 2d: Renaming columns (already done in Part 2c)
names(temp_data) <- c("City", "Temperature")
print(temp_data)
## Part 2e: Print structure of data frame
str(temp_data)
## Part 2f: Content of row 3 and row 4
print(temp_data[3:4,])
## Part 2g: City with the highest and lowest temperature
max_temp_city <- temp_data[which.max(temp_data$Temperature), "City"]
min_temp_city <- temp_data[which.min(temp_data$Temperature), "City"]
cat("City with highest temperature:", max_temp_city, "\n")
cat("City with lowest temperature:", min_temp_city, "\n")
# 3. Working with Matrices
## Part 3a: Create a matrix with values from 1-8 and 11-14
matrix_data <- matrix(c(1:8, 11:14), nrow=3, ncol=4)
print(matrix_data)
## Part 3b: Multiply the matrix by 2
mult_matrix <- matrix_data * 2
print(mult_matrix)
## Part 3c: Content of row 2
print(matrix_data[2,])
## Part 3d: Display columns 3 and 4 in rows 1 and 2
print(matrix_data[1:2, 3:4])
## Part 3e: Display columns 2 and 3 in row 3
print(matrix_data[3, 2:3])
## Part 3f: Display column 4
print(matrix_data[, 4])
## Part 3g: Name rows and columns
rownames(mult_matrix) <- c("isa", "dalawa", "tatlo")
colnames(mult_matrix) <- c("uno", "dos", "tres", "quatro")
print(mult_matrix)
## Part 3h: Reshape matrix to 2 columns and 6 rows
dim(matrix_data) <- c(6, 2)
print(matrix_data)
# 4. Using Arrays
## Part 4a: Create a 3D array with repeated values
array_data <- array(rep(c(1, 2, 3, 6, 7, 8, 9, 0, 3, 4, 5, 1), 2), dim=c(2, 4, 3))
print(array_data)
## Part 4b: Check array dimensions
print(dim(array_data))
## Part 4c: Name rows, columns, and dimensions
dimnames(array_data) <- list(letters[1:2], LETTERS[1:4], c("1st-Dimensional Array", "2nd-Dimensional Array", "3rd-Dimensional Array"))
print(array_data)
load("C:/Users/kurts/Desktop/R-Code/Ranks.RData")
load("C:/Users/kurts/Desktop/R-Code/Ranks.RData")
load("C:/Users/kurts/Desktop/R-Code/new.RData")
load("C:/Users/kurts/Desktop/R-Code/RWorksheet_2/Ranks.RData")
load("C:/Users/kurts/Desktop/R-Code/RWorksheet_2/new.RData")
View(subset_ranks)
plot(c(1,8),c(3,10))
View(mult_matrix)
View(matrix_data)
View(matrix_data)
View(matrix_data)
View(mult_matrix)
View(selected_columns)
View(selected_columns)
View(selected_columns)
plot(c(1,4),c(3,10))
8
plot(c(1,8),c(3,10))
plot c(1,4)
plot c(1,4)
plot(c(1,4))
plot(1,4)
plot(1,4)
plot(1,4)
plot(c(1,8),c(1,10))
plot(c(1,8),c(1,10))
plot(c(1,8),c(1,10))
plot(1,4)
plot(1,4)
plot(c(1,8),c(1,10))
plot(1,10)
plot(1:10)
plot(1:10,type="1")
plot(1:10, type="1")
plot(1:10, type="1")
plot(1:10, type="l")  # For a line plot
plot(1:10, type="1")
plot(1:10, type="l")  # For a line plot
plot(1,10, col="red")
plot(1,10, cex=0.5)
plot(1,10, cex=5)
plot(1,10, cex=5, col="blue")
plot(1,10, cex=3, col="blue")
plot(1:10, cex=3, col="blue")
plot(1:10, cex=1.5, col="blue")
plot(1:10, main="Hello", cex=1.5, col="blue")
x <- c(1,2,3,4,5,6)
y <- c(11,22,33,44,55,66)
plot(x,y)
x <- c(1,2,3,4,5,6)
y <- c(11,22,33,44,55,66)
plot(x,y)
x <- c(1,2,3,4,5,6)
y <- c(11,22,33,44,55,66,70)
plot(x,y)
x <- c(1,2,3,4,5,6,7)
y <- c(11,22,33,44,55,66,70)
plot(x,y)
x <- c(10,20,30,40,50)
pie(x, init.angle = 90)
x <- c(10,20,30,40)
pie(x, init.angle = 90)
x <- c(10,20,30,40)
pie(x, init.angle = 180)
x <- c(10,20,30,40)
pie(x, init.angle = 60)
x <- c(10,20,30,40)
pie(x, init.angle = 360)
x <- c(10,20,30,40)
pie(x, init.angle = 90)
x <- c(10,20,30,40,50)
label <- c("Apples", "Bananas", "Cherries", "Dates", "Blueberry")
pie(x, label = label)
x <- c(10,20,30,40,50)
label <- c("Apples", "Bananas", "Cherries", "Dates", "Blueberry")
pie(x, label = label, main = "Fruits")
x <- c("A","B","C","D")
y <- c(2,4,6,8)
barplot(y, names.arg = x, col = "blue")
x <- c("A","B","C","D")
y <- c(2,4,6,8)
barplot(y, names.arg = x, col = "black")
x <- c("A","B","C","D")
y <- c(2,4,6,8)
barplot(y, names.arg = x, col = "#111111")
x <- c("A","B","C","D")
y <- c(2,4,6,8)
barplot(y, names.arg = x, col = "green")
isntall.packages('ggplot2')
install.packages('ggplot2')
install.packages
install.packages("tidyverse")
install.packages("dplyr")
for (i in 1:5) {
cat(rep("*", i), "\n")
}
# Create vector A and a 5x5 zero matrix
vectorA <- c(1, 2, 3, 4, 5)
matrix5x5 <- matrix(0, nrow = 5, ncol = 5)
for (i in 1:5) {
for (j in 1:5) {
matrix5x5[i, j] <- abs(vectorA[j] - i)
}
}
print(matrix5x5)
n <- as.integer(readline(prompt = "Enter the starting number for Fibonacci sequence: "))
# Prompt the user for a number
user_input <- readline(prompt = "Enter a number from 1 to 50: ")
# Prompt the user for a number
user_input <- readline(prompt = "Enter a number from 1 to 50: ")
# 1.a Create a data frame.
Data_Frame <- data.frame (
Shoe_Size = c(6.5, 9.0, 8.5, 8.5, 10.5, 7.0, 9.5, 9.0, 13.0, 7.5, 10.5, 8.5, 12.0, 10.5, 13.0, 11.5, 8.5, 5.0, 10.0, 6.5, 7.5, 8.5, 10.5, 8.5, 10.5, 11.0, 9.0, 13.0),
Height = c(66.0, 68.0, 64.5, 65.0, 70.0, 64.0, 70.0, 71.0, 72.0, 64.0, 74.75, 67.0, 71.0, 71.0, 77.0, 72.0, 59.0, 62.0, 72.0, 66.0, 64.0, 67.0, 73.0, 69.0, 72.0, 70.0, 69.0, 70.0),
Gender = c("F", "F", "F", "F", "M", "F", "F", "F", "M", "F", "M", "F", "M", "M", "M", "M", "F", "F", "M", "F", "F", "M", "M", "F", "M", "M", "M", "M")
)
Data_Frame
# 1.b	Create a subset by males and females with their corresponding shoe size and height.
# Subset for Females
female_subset <- subset(Data_Frame, Gender == "F", select = c(Shoe_Size, Height))
female_subset
# Subset for Males
male_subset <- subset(Data_Frame, Gender == "M", select = c(Shoe_Size, Height))
male_subset
# 1.c Find the mean of shoe size and height of the respondents.
# Mean of Shoe Size
mean_shoe_size <- mean(Data_Frame$Shoe_Size)
mean_shoe_size
# Mean of Height
mean_height <- mean(Data_Frame$Height)
mean_height
# 1.d Is there a relationship between shoe size and height? Why?
# NO...
# 2. Construct character vector months to a factor with factor() and assign the result to factor_months_vector.
# Create the character vector for months
months_vector <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April")
# Convert months_vector to a factor
factor_months_vector <- factor(months_vector)
# Print the factor version
print(factor_months_vector)
# Print levels of the factor
levels(factor_months_vector)
#3.	Then check the summary() of the months_vector and factor_months_vector. | Inter- pret the results of both vectors. Are they both equally useful in this case?
# Get summary of the original character vector
summary(months_vector)
# Get summary of the factor vector
summary(factor_months_vector)
# 4.	Create a vector and factor for the table below.
# Create the character vector for directions
directions_vector <- c("East", "West", "North", "West", "West", "West", "North", "North")
# Convert it to a factor with a specified order of levels
factor_directions_vector <- factor(directions_vector, levels = c("East", "West", "North"))
# Print the factor vector with the specified order of levels
print(factor_directions_vector)
# 5. 5.	Enter the data below in Excel with file name = import_march.csv
read.table(file = "import_march.csv", header=TRUE, sep=",")
# Prompt the user for a number
user_input <- readline(prompt = "Enter a number from 1 to 50: ")
# Assuming the file is named "data.csv"
library(readxl)
dataset <- read.csv("data.csv")  # or use read_excel("data.xlsx") if Excel
# 8.
# a. Create a dataframe from the above table. Write the R codes and its output.
data <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90)
)
print(data)
# b. Without using the rowMean function, output the average score of students whose average math score over 90 points during the semester. write R code and its output.
average_scores <- rowSums(data[, 2:5]) / 4
for (i in 1:nrow(data)) {
if (average_scores[i] > 90) {
cat(data$Name[i], "â€™s average grade this semester is", average_scores[i], "\n")
}
}
# c. Without using the mean function, output as follows for the tests in which the average score was less than 80 out of 4 tests.
test_averages <- colMeans(data[, 2:5])
for (i in 1:length(test_averages)) {
if (test_averages[i] < 80) {
cat("Test", i, "was difficult.\n")
}
}
# d. Without using the max function, output as follows for students whose highest score for a semester exceeds 90 points.
for (i in 1:nrow(data)) {
if (max(data[i, 2:5]) > 90) {
cat(data$Name[i], "â€™s highest grade this semester is", max(data[i, 2:5]), "\n")
}
}
